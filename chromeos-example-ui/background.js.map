{"version":3,"file":"background.js","mappings":";;;;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,qCAAqC,WAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACjF2D;AAC5C;AACf;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACdA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;;;ACtBA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AAC4C;AACE;AACvC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,uEAAyB;AACxF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,8DAAiB;AACtD;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,gBAAgB,2EAA6B,GAAG,2BAA2B;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,WAAW;AACxE;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AClGO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,cAAc;AACpC;AACA;AACA,sEAAsE,KAAK;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,cAAc;AACpC;AACA,sEAAsE,KAAK;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;ACjD0C;AACI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2BAA2B,mDAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,6BAA6B,2DAAa;AAC1C;AACA;AACA,gBAAgB,2DAAa;AAC7B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,2DAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACvG0C;AACI;AACvC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mDAAgB;AACjD;AACA;AACA;AACA;AACA,0BAA0B,+DAAiB;AAC3C;AACA;AACA;AACA,cAAc,2EAA6B;AAC3C,cAAc,2EAA6B;AAC3C;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAqB;AACjC,YAAY,mEAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzDwD;AACN;AACJ;AAC9C,IAAI,IAAqB;AACzB,IAAI,mEAAiB;AACrB;AACA,KAAK,EAOJ;AACM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AACxB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kBAAkB;AACZ;AACP;AACA;AACA;AACA;AACA,CAAC,4BAA4B;AACtB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C;AAC3C;AACO;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,wBAAwB;AAClB;AACP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B;AACpB;AACP;AACA;AACA;AACA,CAAC,sCAAsC;AAChC;AACP;AACA;AACA,CAAC,4CAA4C;AACtC;AACP;AACA;AACA;AACA;AACA,CAAC,0BAA0B;AACpB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AAC1B;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AAChC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AAC5B;AACP;AACA;AACA;AACA;AACA,CAAC,4BAA4B;AACtB;AACP;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AAChC;AACP;AACA;AACA,CAAC,kCAAkC;;;;;;;UC7HnC;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;ACNoD;AACS;AACC;AACV;AACC;AACrD;AACA;AACA;AACA,kCAAkC,6DAAO;AACzC,uCAAuC,8DAAY;AACnD,sCAAsC,uEAAkB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,+DAAkB;AACxD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,4BAA4B,6EAAwB;AACpD;AACA;AACA;AACA","sources":["webpack://cros-pinyin/./src/api/base.ts","webpack://cros-pinyin/./src/api/chromeos/config.ts","webpack://cros-pinyin/./src/api/chromeos/states.ts","webpack://cros-pinyin/./src/api/decoder.ts","webpack://cros-pinyin/./src/api/eventdispatcher.ts","webpack://cros-pinyin/./src/api/imelifecycle.ts","webpack://cros-pinyin/./src/api/runtime.ts","webpack://cros-pinyin/./src/api/setglobalconfig.ts","webpack://cros-pinyin/./src/model/enums.ts","webpack://cros-pinyin/webpack/bootstrap","webpack://cros-pinyin/webpack/runtime/define property getters","webpack://cros-pinyin/webpack/runtime/hasOwnProperty shorthand","webpack://cros-pinyin/webpack/runtime/make namespace object","webpack://cros-pinyin/./src/entries/ime-ui.ts"],"sourcesContent":["export class EventListener {\n    static getEventListener(manager, eventName) {\n        if (eventName in manager) {\n            return manager[eventName].bind(manager);\n        }\n        throw new Error(`Not found ${eventName} function.`);\n    }\n    static getPoint(namespaces) {\n        let currentPoint = globalThis;\n        namespaces.split(\".\").forEach((name) => {\n            if (name in currentPoint) {\n                currentPoint = currentPoint[name];\n            }\n            else {\n                throw new Error(\"Namespace error!\");\n            }\n        });\n        return currentPoint;\n    }\n    static registerListener(namespace, eventName, manager) {\n        if (IMEConfig.envName === \"chromeos\"\n            && Reflect.has(namespace, eventName)\n            && Reflect.has(manager, eventName)) {\n            let endPoint = namespace[eventName];\n            if (Reflect.has(endPoint, 'addListener')) {\n                let listener = manager[eventName].bind(manager);\n                endPoint.addListener(listener);\n                let dispose = () => {\n                    endPoint.removeListener(listener);\n                };\n                return { dispose };\n            }\n        }\n        throw new Error(`${eventName} listener registration fatal.`);\n    }\n    static registerEventListener(eventName, manager) {\n        let listener = manager[eventName].bind(manager);\n        manager.addEventListener(eventName, listener);\n        let dispose = () => {\n            manager.removeEventListener(eventName, listener);\n        };\n        return { dispose };\n    }\n    static getListener(manager, eventName) {\n        if (Reflect.has(manager, eventName) && typeof manager[eventName] === 'function') {\n            return manager[eventName].bind(manager);\n        }\n        throw new Error(\"Registe\");\n    }\n}\nexport class BaseEventManager extends EventTarget {\n    constructor() {\n        super(...arguments);\n        this._events = {};\n    }\n    set events(lists) {\n        lists.forEach((item) => {\n            if (!item)\n                return;\n            this._events[item[0]] = item[1];\n        });\n    }\n    addListeners(namespace, eventsList, manager) {\n        this.events = eventsList.map((eventName) => {\n            if (!Reflect.has(manager, eventName))\n                return undefined;\n            let eventManager = EventListener.registerListener(namespace, eventName, manager);\n            return [eventName, eventManager];\n        });\n    }\n    addEventListeners(eventsList, manager) {\n        this.events = eventsList.map((eventName) => {\n            if (!Reflect.has(manager, eventName))\n                return undefined;\n            let eventManager = EventListener.registerEventListener(eventName, manager);\n            return [eventName, eventManager];\n        });\n    }\n    static dispose(disposable) {\n        disposable.dispose();\n    }\n}\n","import { getGlobalState, saveGlobalState } from \"./states\";\nexport default function setChromeOSConfig() {\n    globalThis.IMEConfig = {\n        envName: \"chromeos\",\n        menuItems: [],\n        ime: chrome.input.ime,\n        runtime: chrome.runtime,\n        getGlobalState,\n        saveGlobalState,\n        onInstalled() {\n            chrome.runtime.openOptionsPage(console.log);\n            return true;\n        }\n    };\n}\n","const STORAGE_KEY = \"global_state\";\nlet states = {};\nexport function getGlobalState() {\n    return new Promise((resolve, reject) => {\n        chrome.storage.local.get(STORAGE_KEY, (res) => {\n            if (STORAGE_KEY in res) {\n                resolve(res[STORAGE_KEY]);\n            }\n            else {\n                resolve(undefined);\n            }\n        });\n    });\n}\nexport function saveGlobalState(states) {\n    return new Promise((resolve, reject) => {\n        chrome.storage.local.set({\n            [STORAGE_KEY]: states\n        }, () => {\n            resolve(true);\n        });\n    });\n}\n","var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _DecoderItemManager_port, _DecoderItemManager_main, _DecoderItemManager_permissions, _DecoderItemManager_shortcuts;\nimport { EventType } from \"src/model/enums\";\nimport { imeConfig } from \"./setglobalconfig\";\nexport class DecoderItemManager {\n    constructor(extID, config) {\n        this.extID = extID;\n        _DecoderItemManager_port.set(this, void 0);\n        _DecoderItemManager_main.set(this, false);\n        _DecoderItemManager_permissions.set(this, []);\n        _DecoderItemManager_shortcuts.set(this, []);\n        this.reconnectTimeoutID = 0;\n        this.config = config;\n    }\n    get main() {\n        return __classPrivateFieldGet(this, _DecoderItemManager_main, \"f\");\n    }\n    get permissions() {\n        return __classPrivateFieldGet(this, _DecoderItemManager_permissions, \"f\");\n    }\n    get shortcuts() {\n        return __classPrivateFieldGet(this, _DecoderItemManager_shortcuts, \"f\");\n    }\n    set config(data) {\n        __classPrivateFieldSet(this, _DecoderItemManager_main, data[0], \"f\");\n        __classPrivateFieldSet(this, _DecoderItemManager_permissions, data[1], \"f\");\n        __classPrivateFieldSet(this, _DecoderItemManager_shortcuts, data[2], \"f\");\n    }\n    dispose() {\n        clearTimeout(this.reconnectTimeoutID);\n        __classPrivateFieldGet(this, _DecoderItemManager_port, \"f\")?.disconnect();\n    }\n    connect() {\n        __classPrivateFieldSet(this, _DecoderItemManager_port, imeConfig.runtime.connect(this.extID), \"f\");\n        this.messageCb = this.onMessage.bind(this);\n        __classPrivateFieldGet(this, _DecoderItemManager_port, \"f\").onMessage.addListener(this.messageCb);\n        __classPrivateFieldGet(this, _DecoderItemManager_port, \"f\").onDisconnect.addListener(() => {\n            __classPrivateFieldSet(this, _DecoderItemManager_port, undefined, \"f\");\n        });\n        this.addReconnectTimeout();\n    }\n    addReconnectTimeout() {\n        this.reconnectTimeoutID = setTimeout(() => this.connect(), DecoderItemManager.RECONNECT_TIME);\n    }\n    onMessage(msg, port) {\n        if (this.onmessage) {\n            this.onmessage(msg, this);\n        }\n    }\n    handleEvent(eventName, value) {\n        if (__classPrivateFieldGet(this, _DecoderItemManager_permissions, \"f\")?.indexOf(eventName)) {\n            if (eventName === \"onKeyEvent\") {\n                let keyEvent = value[1];\n                let requestId = value[2];\n                if (keyEvent.type == EventType.KEYDOWN) {\n                    this.postMessage({\n                        data: {\n                            type: eventName,\n                            value\n                        }\n                    });\n                }\n                imeConfig.ime.keyEventHandled({ requestId, response: true });\n            }\n            this.postMessage({\n                data: {\n                    type: eventName,\n                    value\n                }\n            });\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    postMessage(msg) {\n        if (!__classPrivateFieldGet(this, _DecoderItemManager_port, \"f\"))\n            this.connect();\n        try {\n            __classPrivateFieldGet(this, _DecoderItemManager_port, \"f\")?.postMessage(msg);\n        }\n        catch (e) {\n            throw new Error(`Extension connect failed with ${this.extID}.`);\n        }\n    }\n}\n_DecoderItemManager_port = new WeakMap(), _DecoderItemManager_main = new WeakMap(), _DecoderItemManager_permissions = new WeakMap(), _DecoderItemManager_shortcuts = new WeakMap();\nDecoderItemManager.RECONNECT_TIME = 3 * 60 * 1000;\n","export class IMEEventDispatcher {\n    constructor(lifecycle) {\n        this.lifecycle = lifecycle;\n        this.decoders = [];\n    }\n    add(decoder) {\n        if (decoder.main) {\n            this.mainDecoder = decoder;\n            decoder.onmessage = (msg, manager) => {\n                let { type, value } = msg.data;\n                let subDecoders = this.decoders.filter(decoder => decoder.handleEvent(type, value));\n                if (subDecoders.length === 0 && !this.lifecycle.handleIMEEvent(type, value)) {\n                    throw new Error(`Not found IME event handler of ${type}.`);\n                }\n            };\n        }\n        else {\n            this.decoders.push(decoder);\n            decoder.onmessage = (msg, manager) => {\n                let { type, value } = msg.data;\n                if (!this.lifecycle.handleIMEEvent(type, value)) {\n                    throw new Error(`Not found IME event handler of ${type}`);\n                }\n            };\n        }\n    }\n    connects() {\n        this.decoders.forEach((port) => {\n            port.connect();\n        });\n    }\n    dispatch(name, value) {\n        if (!this.mainDecoder)\n            throw new Error(\"Must be have main decoder.\");\n        this.mainDecoder.postMessage({\n            data: {\n                type: name,\n                value\n            }\n        });\n        this.decoders.forEach((decoder) => {\n            decoder.handleEvent(name, value);\n        });\n    }\n    disposes() {\n        this.decoders.forEach((port) => {\n            port.dispose();\n        });\n    }\n}\n","import { BaseEventManager } from \"./base\";\nimport { imeConfig } from \"./setglobalconfig\";\nconst imeEventList = [\n    \"onActivate\",\n    \"onAssistiveWindowButtonClicked\",\n    \"onBlur\",\n    \"onCandidateClicked\",\n    \"onDeactivated\",\n    \"onFocus\",\n    \"onInputContextUpdate\",\n    \"onKeyEvent\",\n    \"onMenuItemActivated\",\n    \"onReset\",\n    \"onSurroundingTextChanged\"\n];\nconst imeMethodList = [\n    \"clearComposition\",\n    \"commitText\",\n    \"deleteSurroundingText\",\n    \"hideInputView\",\n    \"keyEventHandled\",\n    \"sendKeyEvents\",\n    \"setAssistiveWindowButtonHighlighted\",\n    \"setAssistiveWindowProperties\",\n    \"setCandidates\",\n    \"setCandidateWindowProperties\",\n    \"setComposition\",\n    \"setCursorPosition\",\n    \"setMenuItems\",\n    \"updateMenuItems\"\n];\nexport class IMELifecycle extends BaseEventManager {\n    constructor() {\n        super();\n        imeEventList.forEach((item) => {\n            if (Reflect.has(this, item))\n                return;\n            this[item] = (...args) => {\n                this.dispatchIMEEvent(item, args);\n            };\n        });\n        imeMethodList.forEach((item) => {\n            if (Reflect.has(this, item))\n                return;\n            if (!Reflect.has(imeConfig.ime, item))\n                return;\n            this[item] = (...args) => {\n                imeConfig.ime[item](...args);\n            };\n        });\n    }\n    dispatchIMEEvent(eventName, args) {\n        this.eventDispatcher?.dispatch(eventName, args);\n    }\n    handleIMEEvent(eventName, args) {\n        if (eventName in this) {\n            this[eventName](...args);\n            return true;\n        }\n        return false;\n    }\n    registerListeners() {\n        this.addListeners(imeConfig.ime, imeEventList, this);\n    }\n    onActivate(engineID) {\n        this._engineID = engineID;\n        this.eventDispatcher?.connects();\n        this.dispatchIMEEvent(\"onActivate\", [engineID]);\n    }\n    onFocus(context) {\n        this._contextID = context.contextID;\n        this.dispatchIMEEvent(\"onFocus\", [context]);\n    }\n    onDeactivated() {\n        this.eventDispatcher?.disposes();\n    }\n    onKeyEvent(engineID, keyEvent, requestId) {\n        this.dispatchIMEEvent(\"onKeyEvent\", [engineID, keyEvent, requestId]);\n    }\n}\nexport class DecoderLifecycle {\n    onActivate(engineID) {\n    }\n    onAssistiveWindowButtonClicked(details) {\n    }\n    onBlur(contextID) {\n    }\n    onCandidateClicked(engineID, candidatesID, button) {\n    }\n    onDeactivated(engineID) {\n    }\n    onFocus(context) {\n    }\n    onInputContextUpdate(context) {\n    }\n    onKeyEvent(engineID, keyData, requestId) {\n    }\n    onMenuItemActivated(engineID, name) {\n    }\n    onReset(engineID) {\n    }\n    onSurroundingTextChanged(engineID, surroundingInfo) {\n    }\n}\n","import { BaseEventManager } from \"./base\";\nimport { imeConfig } from \"./setglobalconfig\";\nexport const runtimeEventList = [\n    \"onConnect\",\n    \"onConnectExternal\",\n    \"onInstalled\",\n    \"onMessage\",\n    \"onMessageExternal\",\n    \"onBrowserUpdateAvailable\",\n    \"onRestartRequired\",\n    \"onStartup\",\n    \"onSuspend\",\n    \"onSuspendCanceled\",\n    \"onUpdateAvailable\"\n];\nclass BaseRuntimeManager extends BaseEventManager {\n    constructor() {\n        super();\n    }\n    registerListeners() {\n        this.addListeners(imeConfig.runtime, runtimeEventList, this);\n    }\n    sendMessage(msg) {\n        msg.extID\n            ? imeConfig.runtime.sendMessage(msg.extID, msg.data, msg.cb)\n            : imeConfig.runtime.sendMessage(msg.data, msg.cb);\n    }\n}\nexport class UIRuntimeManager extends BaseRuntimeManager {\n    constructor() {\n        super();\n    }\n    onInstalled() {\n        console.log(\"onInstalled\");\n        if (imeConfig.onInstalled) {\n            imeConfig.onInstalled();\n        }\n    }\n    onMessage(message, sender, sendResponse) {\n    }\n    onMessageExternal(message, sender, sendResponse) {\n    }\n    onConnect() {\n    }\n}\nexport class DecoderRuntimeManager extends BaseRuntimeManager {\n    constructor() {\n        super();\n    }\n    onInstalled() {\n    }\n    onConnect() {\n    }\n    onConnectExternal() {\n    }\n    onMessage() {\n    }\n}\n","import setChromeOSConfig from \"src/api/chromeos/config\";\nimport setVscodeConfig from \"src/api/code/config\";\nimport setWebConfig from \"src/api/web/config\";\nif (process.env.CHROME_OS) {\n    setChromeOSConfig();\n}\nelse if (process.env.VSCODE) {\n    setVscodeConfig();\n}\nelse if (process.env.WEB) {\n    setWebConfig();\n}\nelse {\n}\nexport const imeConfig = globalThis.IMEConfig;\n","export var EventType;\n(function (EventType) {\n    EventType[\"KEYDOWN\"] = \"keydown\";\n    EventType[\"KEYUP\"] = \"keyup\";\n    EventType[\"COMMIT\"] = \"commit\";\n    EventType[\"MODELUPDATED\"] = \"update\";\n    EventType[\"CLOSING\"] = \"close\";\n    EventType[\"OPENING\"] = \"open\";\n    EventType[\"UPDATESTATE\"] = \"updatestate\";\n    EventType[\"IMERESPONSE\"] = \"get_ime_response\";\n})(EventType || (EventType = {}));\nexport var Key;\n(function (Key) {\n    Key[\"UP\"] = \"Up\";\n    Key[\"DOWN\"] = \"Down\";\n    Key[\"PAGE_UP\"] = \"Page_up\";\n    Key[\"PAGE_DOWN\"] = \"Page_down\";\n    Key[\"SPACE\"] = \" \";\n    Key[\"ENTER\"] = \"Enter\";\n    Key[\"BACKSPACE\"] = \"Backspace\";\n    Key[\"ESC\"] = \"Esc\";\n    Key[\"LEFT\"] = \"Left\";\n    Key[\"RIGHT\"] = \"Right\";\n    Key[\"INVALID\"] = \"\\uFFFD\";\n})(Key || (Key = {}));\nexport var Modifier;\n(function (Modifier) {\n    Modifier[\"SHIFT\"] = \"Shift\";\n    Modifier[\"CTRL\"] = \"Control\";\n    Modifier[\"ALT\"] = \"Alt\";\n})(Modifier || (Modifier = {}));\nexport var KeyboardLayouts;\n(function (KeyboardLayouts) {\n    KeyboardLayouts[\"STANDARD\"] = \"Default\";\n    KeyboardLayouts[\"GINYIEH\"] = \"Gin Yieh\";\n    KeyboardLayouts[\"ETEN\"] = \"Eten\";\n    KeyboardLayouts[\"IBM\"] = \"IBM\";\n    KeyboardLayouts[\"HSU\"] = \"Hsu\";\n    KeyboardLayouts[\"ETEN26\"] = \"Eten 26\";\n})(KeyboardLayouts || (KeyboardLayouts = {}));\n;\nexport var Status;\n(function (Status) {\n    Status[Status[\"INIT\"] = 0] = \"INIT\";\n    Status[Status[\"FETCHING\"] = 1] = \"FETCHING\";\n    Status[Status[\"FETCHED\"] = 2] = \"FETCHED\";\n    Status[Status[\"SELECT\"] = 3] = \"SELECT\";\n})(Status || (Status = {}));\nexport var StateID;\n(function (StateID) {\n    StateID[\"LANG\"] = \"lang\";\n    StateID[\"SBC\"] = \"sbc\";\n    StateID[\"PUNC\"] = \"punc\";\n    StateID[\"TRADITIONAL\"] = \"traditional\";\n    StateID[\"PREDICTOR\"] = \"predictor\";\n})(StateID || (StateID = {}));\nexport var PinyinStateID;\n(function (PinyinStateID) {\n    PinyinStateID[\"VERTICAL\"] = \"enableVertical\";\n    PinyinStateID[\"PREDICT_ENGINE\"] = \"predictEngine\";\n})(PinyinStateID || (PinyinStateID = {}));\nexport var ShuangpinStateID;\n(function (ShuangpinStateID) {\n    ShuangpinStateID[\"SOLUTION\"] = \"shuangpinSolution\";\n})(ShuangpinStateID || (ShuangpinStateID = {}));\nexport var TransID;\n(function (TransID) {\n    TransID[TransID[\"BACK\"] = 0] = \"BACK\";\n    TransID[TransID[\"TEXT\"] = 1] = \"TEXT\";\n    TransID[TransID[\"INSTANT\"] = 2] = \"INSTANT\";\n})(TransID || (TransID = {}));\nexport var MessageKey;\n(function (MessageKey) {\n    MessageKey[\"SOURCE\"] = \"source\";\n    MessageKey[\"HIGHLIGHT\"] = \"highlight\";\n    MessageKey[\"APPEND\"] = \"append\";\n    MessageKey[\"DELETE\"] = \"delete\";\n    MessageKey[\"REVERT\"] = \"revert\";\n    MessageKey[\"CLEAR\"] = \"clear\";\n    MessageKey[\"IME\"] = \"ime\";\n    MessageKey[\"SELECT_HIGHLIGHT\"] = \"select_highlight\";\n    MessageKey[\"SELECT\"] = \"select\";\n    MessageKey[\"COMMIT\"] = \"commit\";\n    MessageKey[\"MULTI\"] = \"multi\";\n    MessageKey[\"FUZZY_PAIRS\"] = \"fuzzy_pairs\";\n    MessageKey[\"USER_DICT\"] = \"user_dict\";\n    MessageKey[\"COMMIT_MARK\"] = \"|\";\n})(MessageKey || (MessageKey = {}));\nexport var InputToolCode;\n(function (InputToolCode) {\n    InputToolCode[\"WASM_PINYIN\"] = \"zh-wasm-pinyin\";\n    InputToolCode[\"WASM_SHUANGPIN\"] = \"zh-wasm-shuangpin\";\n    InputToolCode[\"JS_PINYIN\"] = \"zh-js-pinyin\";\n    InputToolCode[\"JS_SHUANGPIN\"] = \"zh-js-shuangpin\";\n})(InputToolCode || (InputToolCode = {}));\nexport var MessageType;\n(function (MessageType) {\n    MessageType[MessageType[\"UPDATE_STATE\"] = 1] = \"UPDATE_STATE\";\n    MessageType[MessageType[\"INSTALLED\"] = 2] = \"INSTALLED\";\n    MessageType[MessageType[\"DECODE\"] = 3] = \"DECODE\";\n    MessageType[MessageType[\"IMERESPONSE\"] = 4] = \"IMERESPONSE\";\n    MessageType[MessageType[\"ADD_USER_COMMITS\"] = 5] = \"ADD_USER_COMMITS\";\n    MessageType[MessageType[\"ENABLE_USER_DICT\"] = 6] = \"ENABLE_USER_DICT\";\n    MessageType[\"GET_STATES\"] = \"get_states\";\n    MessageType[\"GET_CONFIG\"] = \"get_config\";\n    MessageType[\"IME_REFRESH\"] = \"refresh\";\n    MessageType[\"CLEAR\"] = \"clear\";\n    MessageType[\"VISIBILITY\"] = \"visibility\";\n    MessageType[\"TOGGLE_LANGUAGE_STATE\"] = \"lang_state\";\n})(MessageType || (MessageType = {}));\nexport var Decoders;\n(function (Decoders) {\n    Decoders[Decoders[\"WASM\"] = 0] = \"WASM\";\n    Decoders[Decoders[\"JS\"] = 1] = \"JS\";\n    Decoders[Decoders[\"ONLINE\"] = 2] = \"ONLINE\";\n})(Decoders || (Decoders = {}));\nexport var PredictEngine;\n(function (PredictEngine) {\n    PredictEngine[PredictEngine[\"BAIDU\"] = 0] = \"BAIDU\";\n    PredictEngine[PredictEngine[\"GOOGLE\"] = 1] = \"GOOGLE\";\n    PredictEngine[PredictEngine[\"GOOGLE_CN\"] = 2] = \"GOOGLE_CN\";\n})(PredictEngine || (PredictEngine = {}));\nexport var GlobalState;\n(function (GlobalState) {\n    GlobalState[\"remoteExtId\"] = \"connectExtId\";\n})(GlobalState || (GlobalState = {}));\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { IMELifecycle } from \"src/api/imelifecycle\";\nimport { IMEEventDispatcher } from \"src/api/eventdispatcher\";\nimport { UIRuntimeManager as Runtime } from \"src/api/runtime\";\nimport { imeConfig } from \"src/api/setglobalconfig\";\nimport { DecoderItemManager } from \"src/api/decoder\";\nclass IMEUIManager {\n    constructor(globalState) {\n        this.globalState = globalState;\n        this.runtimeManager = new Runtime();\n        this.imeLifecycleManager = new IMELifecycle();\n        this.imeEventDispatcher = new IMEEventDispatcher(this.imeLifecycleManager);\n        this.imeLifecycleManager.eventDispatcher = this.imeEventDispatcher;\n    }\n    async initialize() {\n        this.runtimeManager.registerListeners();\n        this.imeLifecycleManager.registerListeners();\n        this.registerConnection();\n    }\n    registerUserInputEvent() {\n    }\n    registerConnection() {\n        if (this.globalState && 'decoders' in this.globalState) {\n            this.globalState.decoders.forEach((item) => {\n                let itemManager = new DecoderItemManager(item[0], item[1]);\n                this.imeEventDispatcher.add(itemManager);\n            });\n        }\n    }\n}\nasync function main() {\n    let globalState = await imeConfig.getGlobalState();\n    let uiManager = new IMEUIManager(globalState);\n    await uiManager.initialize();\n}\nmain();\n"],"names":[],"sourceRoot":""}